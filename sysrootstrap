#!/bin/bash

set -e

function err() {
    echo $1 >&2
}

function errcat() {
    cat >&2
}

function log() {
    echo "[+] $1"
}

function panic() {
    err "[!] $1"
    exit 1
}

# fetch("https://www.example.com/foo/bar.tar", "/tmp") -> "/tmp/www.example.com/foo/bar.tar"
function fetch() {
    local url=$1
    local destination=$2
    local localpath="$destination/$(strip_scheme $url)"

    mkdir -p $(dirname $localpath)

    if ! curl --no-progress-meter --fail --location --output $localpath $url
    then
        panic "Error while fetching $1"
    fi

    echo $localpath
}

function extname() {
    local path=$1
    local file=$(basename $path)
    echo "${file##*.}"
}

function remove_ext() {
    local path=$1
    local ext=".$(extname $path)"

    echo "$(dirname $path)/$(basename $path $ext)"
}

function ensure_command() {
    local cmd=$1
    local message=$2
    if ! which "$cmd" > /dev/null
    then
        panic $message
    fi
}

function ensure_file() {
    local file=$1

    if [ ! -f "$file" ]
    then
        panic "Couldn't find file: $file"
    fi
}

function decompress() {
    local path=$1
    local file=$(basename $path)
    local extension

    case $(extname $path) in
    zst)
        ensure_command unzstd "Missing unzstd. Try: brew install zstd"
        unzstd --quiet $path
        ;;
    bz2)
        bunzip2 --quiet $path
        ;;
    xz)
        unxz --quiet $path
        ;;
    gz)
        gunzip --quiet $path
        ;;
    *)
        panic "Unknown compression format $path"
        ;;
    esac
}

function extract_deb() {
    local deb=$1
    local destination=$2
    local name=$(basename $deb)
    local dir="$(dirname $deb)/$(basename $deb .deb)"

    mkdir -p $dir

    pushd $dir >/dev/null

    ar -x "../$name"
    local datafile=$(ls data.tar.* | head -n1)

    if [ "$datafile" = "" ] || [ ! -f "$datafile" ]
    then
        panic "Can't find data.tar in $deb"
    fi

    decompress $datafile
    tar -xf data.tar -C $destination

    popd >/dev/null
}

function strip_scheme() {
    local url=$1

    echo $(echo $url | sed -E 's@^https?://@@')
}

# Debian signing keys (for later): https://ftp-master.debian.org/keys.html

function fetch_ubuntu_archive_signing_key() {
    local suite=$1
    local destination=$2
    local url key_path

    case $suite in
    jammy)
        url="https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/ubuntu-keyring/2021.03.26/ubuntu-keyring_2021.03.26.tar.gz"
        key_path="ubuntu-keyring-2021.03.26/keyrings/ubuntu-keyring-2018-archive.gpg"
        ;;
    *)
        panic "Unknown Ubuntu version: $suite"
        ;;
    esac

    log "Fetching $url"
    local archive_path=$(fetch $url $destination)

    local depth=$(echo $key_path | awk -F/ '{print NF-1}')

    tar -xzf $archive_path --directory $destination --strip-components $depth $key_path
}

function ubuntu_mirror() {
    local arch=$1

    if [ "$arch" = "amd64" ] || [ "$arch" = "i386" ]
    then
        echo http://archive.ubuntu.com/ubuntu
    else
        echo http://ports.ubuntu.com/ubuntu-ports
    fi
}

function verify_sig() {
    local file=$1
    local signature=$2
    local keyring=$3

    if ! gpgv --keyring $keyring $signature $file 2> /dev/null
    then
        panic "Unable to verify $(basename $file)"
    fi
}

function verify_sha256() {
    local file=$1
    local expected=$2

    local actual=$(shasum -a 256 $file | awk '{ print $1 }')
    if [ "$actual" = "" ]; then
        panic "Unable to compute SHA256 sum for $file"
    fi

    if [ ! "$actual" = "$expected" ]; then
        panic "Unexpected SHA256 sum for $(basename $file). Expected $expected, but got $actual."
    fi
}

function release_read_sha256() {
    local release=$1
    local dist_path=$2

    local shastart=$(grep --line-number --max-count=1 ^SHA256: $1 | cut -d: -f1)
    if [ "$shastart" = "" ]; then
        return
    fi

    local expected=$(tail -n +$shastart $release | grep --max-count=1 $dist_path | awk '{ print $1 }')
    if [ "$expected" = "" ]; then
        return
    fi

    echo $expected
}

function required_debs() {
    local packages=$1

    grep -E "^Package: |^Priority: required" $packages | awk -F': ' '/^Priority: required/ { print line } { line = $2 }'
}

function get_raw_dependencies() {
    local packages=$1
    local name=$2
    local deptype=$3 # "Depends or Pre-Depends"

    grep -E "^Package: |^$deptype: " $packages | awk -F': ' "/^$deptype: / { print package \":\", \$2 } { package = \$2 }" | grep "^$name:" | awk -F': ' '{ print $2 }'
}

# Prints each dependency on a separate line. A group of substitutes (foo | bar | baz)
# are printed on a single line separated by spaces (foo bar baz).
function parse_pre_depends() {
    local packages=$1
    local name=$2

    IFS=$'\n'
    for dep in $(get_raw_dependencies $packages $name Pre-Depends | sed 's/, /\n/g' | sed 's/ | / /g' | sed -E 's/ \([^)]*\)//g')
    do
        echo $dep
    done
    unset IFS
}

# Prints each dependency on a separate line. A group of substitutes (foo | bar | baz)
# are printed on a single line separated by spaces (foo bar baz).
function parse_depends() {
    local packages=$1
    local name=$2

    IFS=$'\n'
    for dep in $(get_raw_dependencies $packages $name Depends | sed 's/, /\n/g' | sed 's/ | / /g' | sed -E 's/ \([^)]*\)//g')
    do
        echo $dep
    done
    unset IFS
}

function package_exists() {
    local packages=$1
    local name=$2

    grep "^Package: $name$" $packages >/dev/null
}

function resolve_dependencies() {
    local packages=$1
    declare -a pkgs
    declare -a queue

    while read -r deb
    do
        queue+=("$deb")
    done

    while [ ! ${#queue[@]} = 0 ]
    do
        local pkg="${queue[0]}"
        queue=("${queue[@]:1}") # shift

        for p in "${pkgs[@]}"; do
            if [ "$p" = "$pkg" ]; then
                continue
            fi
        done

        pkgs+=("$pkg")

        declare -a deps

        for line in $(parse_pre_depends $packages $pkg); do
            deps+=("$line")
        done

        for line in $(parse_depends $packages $pkg); do
            deps+=("$line")
        done

        for line in "${deps[@]}"; do
            for p in "${pkgs[@]}"; do
                for opt in $line; do
                    if [ "$opt" = "$p" ]; then
                        continue 3
                    fi
                done
            done

            for p in "${queue[@]}"; do
                for opt in $line; do
                    if [ "$opt" = "$p" ]; then
                        continue 3
                    fi
                done
            done

            local first_opt=$(echo $line | awk '{ print $1 }')
            queue+=("$first_opt")
        done
    done


    # while ! $queue.isEmpty; do
    #   pkg = $queue.shift
    #
    #   if $pkgs.contains($pkg); then
    #     continue
    #   fi
    #
    #   pkgs+=($pkg)
    #
    #   deps = pre_depends($pkg) + depends($pkg)
    #   for each line in deps; do
    #       opts = line.split(' ')
    #       if opts.none? { $0.in? $pkgs } && opts.none? { $0.in? $queue }; then
    #           queue+=($opts[0])
    #       fi
    #   done
    # done

    echo ${pkgs[@]}
}

function usage() {
    err "usage: $0 [options] <suite> <target> [package ...]"
    err
    errcat <<END
        --help      show this message

        --arch=A    set the target architecture (i386, amd64, arm64, etc.)
        --arch A
END
}

exclude_required=""
arch=$(uname -m)

while true; do
    case "$1" in
        --help)
            usage
            exit
            ;;
        --arch=*)
            [ -z "${1#--arch=}" ] && panic "--arch= requires an argument"
            arch="${1#--arch=}"
            shift
            ;;
        --arch)
            [ -z "$2" ] && panic "--arch requires an argument"
            arch="$2"
            shift 2
            ;;
        --exclude-required)
            exclude_required=true
            shift
            ;;
        --*)
            panic "unknown option: $1"
            ;;
        *)
            break
            ;;
    esac
done

if [ $# -lt 2 ]; then
    usage
    exit 1
fi

suite=$1
relroot=$3

shift 3

mirror=$(ubuntu_mirror $arch)

tmpdir=$(mktemp -d)

mkdir -p $relroot
sysroot=$(readlink -f $relroot)

fetch_ubuntu_archive_signing_key $suite $tmpdir
archive_key=$(ls $tmpdir/*.gpg | head -n1)
ensure_file $archive_key

log "Found archive signing key: $(basename $archive_key)"

# TODO: Change this to InRelease which includes both the signature and the data

dist="$mirror/dists/$suite"

release_url="$dist/Release"
release_gpg_url="$dist/Release.gpg"

log "Fetching $release_url"
release=$(fetch $release_url $tmpdir)

log "Fetching $release_gpg_url"
release_gpg=$(fetch $release_gpg_url $tmpdir)

log "Verifying Release"

verify_sig $release $release_gpg $archive_key

packages_repo_path="main/binary-$arch/Packages"
packages_gz_url="$dist/main/binary-$arch/Packages.gz"

log "Fetching $packages_gz_url"
packages_gz=$(fetch $packages_gz_url $tmpdir)
packages=$(remove_ext $packages_gz)

gunzip $packages_gz

log "Verifying Packages"

expected=$(release_read_sha256 $release $packages_repo_path)
if [ "$expected" = "" ]; then
    panic "Unable to read SHA256 of $packages_path from $release"
fi

verify_sha256 $packages $expected

base_debs=$(required_debs $packages)
extra_debs=$@

log "Resolving dependencies..."
debs=$(echo "$base_debs $extra_debs" | tr ' ' '\n' | sort | uniq | resolve_dependencies $packages)

log "Installing $debs"

paths=()
shasums=()

for deb in $debs; do
    if ! line=$(grep -n "^Package: $deb$" $packages); then
        # Some packages (e.g. awk) don't actually exist. Instead, other packages
        # (like mawk and gawk) say that they "Provides: awk". It seems debootstrap
        # just ignores those packages, so we will too.
        continue
    fi

    offset=$(echo $line | cut -d: -f1)
    repo_path=$(tail -n +$offset $packages | grep --max-count=1 "Filename: " | awk -F": " '{ print $2 }')
    shasum=$(tail -n +$offset $packages | grep --max-count=1 "SHA256: " | awk -F": " '{ print $2 }')

    if [ "$repo_path" = "" ]; then
        panic "Unable to find repo path for $package. This shouldn't happen."
    fi

    url="$mirror/$repo_path"

    log "Fetching $url"
    path=$(fetch $url $tmpdir)

    paths+=($path)
    shasums+=("$shasum")
done

for index in ${!paths[@]}
do
    path=${paths[$index]}
    expected=${shasums[$index]}
    filename=$(basename $path)

    log "Verifying $filename"
    verify_sha256 $path $expected

    log "Extracting $filename"
    extract_deb $path $sysroot
done

log "Fixing symlinks..."

pushd $sysroot > /dev/null

for link in $(find . -type l -lname '/*')
do
    dir=$(dirname $link)
    absolute_target=$(readlink $link)
    prefix=$(dirname "$dir" | sed 's@[^/]*@\.\.@g')
    relative_target="$prefix$absolute_target"

    ln -snf $relative_target $link
done

popd > /dev/null

rm -rf $tmpdir
